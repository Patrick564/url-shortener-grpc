// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: url_shortener/url_shortener.proto

package url_shortener

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UrlSortenerClient is the client API for UrlSortener service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UrlSortenerClient interface {
	AddUrl(ctx context.Context, in *Url, opts ...grpc.CallOption) (*ShortUrl, error)
	ListUrls(ctx context.Context, in *Empty, opts ...grpc.CallOption) (UrlSortener_ListUrlsClient, error)
	GetUrl(ctx context.Context, in *ShortUrl, opts ...grpc.CallOption) (*Url, error)
}

type urlSortenerClient struct {
	cc grpc.ClientConnInterface
}

func NewUrlSortenerClient(cc grpc.ClientConnInterface) UrlSortenerClient {
	return &urlSortenerClient{cc}
}

func (c *urlSortenerClient) AddUrl(ctx context.Context, in *Url, opts ...grpc.CallOption) (*ShortUrl, error) {
	out := new(ShortUrl)
	err := c.cc.Invoke(ctx, "/UrlSortener/AddUrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *urlSortenerClient) ListUrls(ctx context.Context, in *Empty, opts ...grpc.CallOption) (UrlSortener_ListUrlsClient, error) {
	stream, err := c.cc.NewStream(ctx, &UrlSortener_ServiceDesc.Streams[0], "/UrlSortener/ListUrls", opts...)
	if err != nil {
		return nil, err
	}
	x := &urlSortenerListUrlsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UrlSortener_ListUrlsClient interface {
	Recv() (*ShortUrl, error)
	grpc.ClientStream
}

type urlSortenerListUrlsClient struct {
	grpc.ClientStream
}

func (x *urlSortenerListUrlsClient) Recv() (*ShortUrl, error) {
	m := new(ShortUrl)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *urlSortenerClient) GetUrl(ctx context.Context, in *ShortUrl, opts ...grpc.CallOption) (*Url, error) {
	out := new(Url)
	err := c.cc.Invoke(ctx, "/UrlSortener/GetUrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UrlSortenerServer is the server API for UrlSortener service.
// All implementations must embed UnimplementedUrlSortenerServer
// for forward compatibility
type UrlSortenerServer interface {
	AddUrl(context.Context, *Url) (*ShortUrl, error)
	ListUrls(*Empty, UrlSortener_ListUrlsServer) error
	GetUrl(context.Context, *ShortUrl) (*Url, error)
	mustEmbedUnimplementedUrlSortenerServer()
}

// UnimplementedUrlSortenerServer must be embedded to have forward compatible implementations.
type UnimplementedUrlSortenerServer struct {
}

func (UnimplementedUrlSortenerServer) AddUrl(context.Context, *Url) (*ShortUrl, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUrl not implemented")
}
func (UnimplementedUrlSortenerServer) ListUrls(*Empty, UrlSortener_ListUrlsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListUrls not implemented")
}
func (UnimplementedUrlSortenerServer) GetUrl(context.Context, *ShortUrl) (*Url, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUrl not implemented")
}
func (UnimplementedUrlSortenerServer) mustEmbedUnimplementedUrlSortenerServer() {}

// UnsafeUrlSortenerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UrlSortenerServer will
// result in compilation errors.
type UnsafeUrlSortenerServer interface {
	mustEmbedUnimplementedUrlSortenerServer()
}

func RegisterUrlSortenerServer(s grpc.ServiceRegistrar, srv UrlSortenerServer) {
	s.RegisterService(&UrlSortener_ServiceDesc, srv)
}

func _UrlSortener_AddUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Url)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UrlSortenerServer).AddUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UrlSortener/AddUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UrlSortenerServer).AddUrl(ctx, req.(*Url))
	}
	return interceptor(ctx, in, info, handler)
}

func _UrlSortener_ListUrls_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UrlSortenerServer).ListUrls(m, &urlSortenerListUrlsServer{stream})
}

type UrlSortener_ListUrlsServer interface {
	Send(*ShortUrl) error
	grpc.ServerStream
}

type urlSortenerListUrlsServer struct {
	grpc.ServerStream
}

func (x *urlSortenerListUrlsServer) Send(m *ShortUrl) error {
	return x.ServerStream.SendMsg(m)
}

func _UrlSortener_GetUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShortUrl)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UrlSortenerServer).GetUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UrlSortener/GetUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UrlSortenerServer).GetUrl(ctx, req.(*ShortUrl))
	}
	return interceptor(ctx, in, info, handler)
}

// UrlSortener_ServiceDesc is the grpc.ServiceDesc for UrlSortener service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UrlSortener_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "UrlSortener",
	HandlerType: (*UrlSortenerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddUrl",
			Handler:    _UrlSortener_AddUrl_Handler,
		},
		{
			MethodName: "GetUrl",
			Handler:    _UrlSortener_GetUrl_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListUrls",
			Handler:       _UrlSortener_ListUrls_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "url_shortener/url_shortener.proto",
}
